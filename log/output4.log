/home/ava/anaconda3/envs/rajkumar/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
Config:
 Config (path: configs/bevformer/bevformer_tiny.py): {'point_cloud_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0], 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'dataset_type': 'CustomNuScenesDataset', 'data_root': 'data/nuscenes/', 'input_modality': {'use_lidar': False, 'use_camera': True, 'use_radar': False, 'use_map': False, 'use_external': True}, 'file_client_args': {'backend': 'disk'}, 'train_pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'PhotoMetricDistortionMultiViewImage'}, {'type': 'LoadAnnotations3D', 'with_bbox_3d': True, 'with_label_3d': True, 'with_attr_label': False}, {'type': 'ObjectRangeFilter', 'point_cloud_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]}, {'type': 'ObjectNameFilter', 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'NormalizeMultiviewImage', 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, {'type': 'RandomScaleImageMultiViewImage', 'scales': [0.5]}, {'type': 'PadMultiViewImage', 'size_divisor': 32}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'CustomCollect3D', 'keys': ['gt_bboxes_3d', 'gt_labels_3d', 'img']}], 'test_pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'NormalizeMultiviewImage', 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, {'type': 'MultiScaleFlipAug3D', 'img_scale': (1600, 900), 'pts_scale_ratio': 1, 'flip': False, 'transforms': [{'type': 'RandomScaleImageMultiViewImage', 'scales': [0.5]}, {'type': 'PadMultiViewImage', 'size_divisor': 32}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'with_label': False}, {'type': 'CustomCollect3D', 'keys': ['img']}]}], 'eval_pipeline': [{'type': 'LoadPointsFromFile', 'coord_type': 'LIDAR', 'load_dim': 5, 'use_dim': 5, 'file_client_args': {'backend': 'disk'}}, {'type': 'LoadPointsFromMultiSweeps', 'sweeps_num': 10, 'file_client_args': {'backend': 'disk'}}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'], 'with_label': False}, {'type': 'Collect3D', 'keys': ['points']}], 'data': {'samples_per_gpu': 1, 'workers_per_gpu': 4, 'train': {'type': 'CustomNuScenesDataset', 'data_root': 'data/nuscenes/', 'ann_file': 'data/nuscenes/nuscenes_infos_temporal_train.pkl', 'pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'PhotoMetricDistortionMultiViewImage'}, {'type': 'LoadAnnotations3D', 'with_bbox_3d': True, 'with_label_3d': True, 'with_attr_label': False}, {'type': 'ObjectRangeFilter', 'point_cloud_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]}, {'type': 'ObjectNameFilter', 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'NormalizeMultiviewImage', 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, {'type': 'RandomScaleImageMultiViewImage', 'scales': [0.5]}, {'type': 'PadMultiViewImage', 'size_divisor': 32}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'CustomCollect3D', 'keys': ['gt_bboxes_3d', 'gt_labels_3d', 'img']}], 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'modality': {'use_lidar': False, 'use_camera': True, 'use_radar': False, 'use_map': False, 'use_external': True}, 'test_mode': False, 'box_type_3d': 'LiDAR', 'use_valid_flag': True, 'bev_size': (50, 50), 'queue_length': 3}, 'val': {'type': 'CustomNuScenesDataset', 'ann_file': 'data/nuscenes/nuscenes_infos_temporal_val.pkl', 'pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'NormalizeMultiviewImage', 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, {'type': 'MultiScaleFlipAug3D', 'img_scale': (1600, 900), 'pts_scale_ratio': 1, 'flip': False, 'transforms': [{'type': 'RandomScaleImageMultiViewImage', 'scales': [0.5]}, {'type': 'PadMultiViewImage', 'size_divisor': 32}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'with_label': False}, {'type': 'CustomCollect3D', 'keys': ['img']}]}], 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'modality': {'use_lidar': False, 'use_camera': True, 'use_radar': False, 'use_map': False, 'use_external': True}, 'test_mode': True, 'box_type_3d': 'LiDAR', 'data_root': 'data/nuscenes/', 'bev_size': (50, 50), 'samples_per_gpu': 1}, 'test': {'type': 'CustomNuScenesDataset', 'data_root': 'data/nuscenes/', 'ann_file': 'data/nuscenes/nuscenes_infos_temporal_val.pkl', 'pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'NormalizeMultiviewImage', 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, {'type': 'MultiScaleFlipAug3D', 'img_scale': (1600, 900), 'pts_scale_ratio': 1, 'flip': False, 'transforms': [{'type': 'RandomScaleImageMultiViewImage', 'scales': [0.5]}, {'type': 'PadMultiViewImage', 'size_divisor': 32}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'with_label': False}, {'type': 'CustomCollect3D', 'keys': ['img']}]}], 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'modality': {'use_lidar': False, 'use_camera': True, 'use_radar': False, 'use_map': False, 'use_external': True}, 'test_mode': True, 'box_type_3d': 'LiDAR', 'bev_size': (50, 50)}, 'shuffler_sampler': {'type': 'DistributedGroupSampler'}, 'nonshuffler_sampler': {'type': 'DistributedSampler'}}, 'evaluation': {'interval': 1, 'pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'NormalizeMultiviewImage', 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, {'type': 'MultiScaleFlipAug3D', 'img_scale': (1600, 900), 'pts_scale_ratio': 1, 'flip': False, 'transforms': [{'type': 'RandomScaleImageMultiViewImage', 'scales': [0.5]}, {'type': 'PadMultiViewImage', 'size_divisor': 32}, {'type': 'DefaultFormatBundle3D', 'class_names': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'with_label': False}, {'type': 'CustomCollect3D', 'keys': ['img']}]}]}, 'checkpoint_config': {'interval': 1}, 'log_config': {'interval': 50, 'hooks': [{'type': 'TextLoggerHook'}, {'type': 'TensorboardLoggerHook'}]}, 'dist_params': {'backend': 'nccl'}, 'log_level': 'INFO', 'work_dir': None, 'load_from': None, 'resume_from': None, 'workflow': [('train', 1)], 'plugin': True, 'plugin_dir': 'projects/mmdet3d_plugin/', 'voxel_size': [0.2, 0.2, 8], 'img_norm_cfg': {'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, '_dim_': 256, '_pos_dim_': 128, '_ffn_dim_': 512, '_num_levels_': 1, 'bev_h_': 50, 'bev_w_': 50, 'queue_length': 3, 'model': {'type': 'BEVFormer', 'use_grid_mask': True, 'video_test_mode': True, 'pretrained': {'img': 'torchvision://resnet50'}, 'img_backbone': {'type': 'ResNet', 'depth': 50, 'num_stages': 4, 'out_indices': (3,), 'frozen_stages': 1, 'norm_cfg': {'type': 'BN', 'requires_grad': False}, 'norm_eval': True, 'style': 'pytorch'}, 'img_neck': {'type': 'FPN', 'in_channels': [2048], 'out_channels': 256, 'start_level': 0, 'add_extra_convs': 'on_output', 'num_outs': 1, 'relu_before_extra_convs': True}, 'pts_bbox_head': {'type': 'BEVFormerHead', 'bev_h': 50, 'bev_w': 50, 'num_query': 900, 'num_classes': 10, 'in_channels': 256, 'sync_cls_avg_factor': True, 'with_box_refine': True, 'as_two_stage': False, 'transformer': {'type': 'PerceptionTransformer', 'rotate_prev_bev': True, 'use_shift': True, 'use_can_bus': True, 'embed_dims': 256, 'encoder': {'type': 'BEVFormerEncoder', 'num_layers': 3, 'pc_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0], 'num_points_in_pillar': 4, 'return_intermediate': False, 'transformerlayers': {'type': 'BEVFormerLayer', 'attn_cfgs': [{'type': 'TemporalSelfAttention', 'embed_dims': 256, 'num_levels': 1}, {'type': 'SpatialCrossAttention', 'pc_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0], 'deformable_attention': {'type': 'MSDeformableAttention3D', 'embed_dims': 256, 'num_points': 8, 'num_levels': 1}, 'embed_dims': 256}], 'feedforward_channels': 512, 'ffn_dropout': 0.1, 'operation_order': ('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm')}}, 'decoder': {'type': 'DetectionTransformerDecoder', 'num_layers': 6, 'return_intermediate': True, 'transformerlayers': {'type': 'DetrTransformerDecoderLayer', 'attn_cfgs': [{'type': 'MultiheadAttention', 'embed_dims': 256, 'num_heads': 8, 'dropout': 0.1}, {'type': 'CustomMSDeformableAttention', 'embed_dims': 256, 'num_levels': 1}], 'feedforward_channels': 512, 'ffn_dropout': 0.1, 'operation_order': ('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm')}}}, 'bbox_coder': {'type': 'NMSFreeCoder', 'post_center_range': [-61.2, -61.2, -10.0, 61.2, 61.2, 10.0], 'pc_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0], 'max_num': 300, 'voxel_size': [0.2, 0.2, 8], 'num_classes': 10}, 'positional_encoding': {'type': 'LearnedPositionalEncoding', 'num_feats': 128, 'row_num_embed': 50, 'col_num_embed': 50}, 'loss_cls': {'type': 'FocalLoss', 'use_sigmoid': True, 'gamma': 2.0, 'alpha': 0.25, 'loss_weight': 2.0}, 'loss_bbox': {'type': 'L1Loss', 'loss_weight': 0.25}, 'loss_iou': {'type': 'GIoULoss', 'loss_weight': 0.0}}, 'train_cfg': {'pts': {'grid_size': [512, 512, 1], 'voxel_size': [0.2, 0.2, 8], 'point_cloud_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0], 'out_size_factor': 4, 'assigner': {'type': 'HungarianAssigner3D', 'cls_cost': {'type': 'FocalLossCost', 'weight': 2.0}, 'reg_cost': {'type': 'BBox3DL1Cost', 'weight': 0.25}, 'iou_cost': {'type': 'IoUCost', 'weight': 0.0}, 'pc_range': [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]}}}}, 'optimizer': {'type': 'AdamW', 'lr': 0.0002, 'paramwise_cfg': {'custom_keys': {'img_backbone': {'lr_mult': 0.1}}}, 'weight_decay': 0.01}, 'optimizer_config': {'grad_clip': {'max_norm': 35, 'norm_type': 2}}, 'lr_config': {'policy': 'CosineAnnealing', 'warmup': 'linear', 'warmup_iters': 500, 'warmup_ratio': 0.3333333333333333, 'min_lr_ratio': 0.001}, 'total_epochs': 24, 'runner': {'type': 'EpochBasedRunner', 'max_epochs': 24}} 

projects.mmdet3d_plugin
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `feedforward_channels` in BaseTransformerLayer has been deprecated, now you should set `feedforward_channels` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `ffn_dropout` in BaseTransformerLayer has been deprecated, now you should set `ffn_drop` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `ffn_num_fcs` in BaseTransformerLayer has been deprecated, now you should set `num_fcs` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
load checkpoint from local path: artifacts/bevformer_tiny_epoch_24.pth
EXPORT
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/detectors/bevformer.py:77: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if img.dim() == 5 and img.size(0) == 1:
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/detectors/bevformer.py:99: TracerWarning: Converting a tensor to a Python integer might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  img_feats_reshaped.append(img_feat.view(B, int(BN / B), C, H, W))
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:143: TracerWarning: Converting a tensor to a NumPy array might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  delta_x = np.array([each['can_bus'][0].cpu().numpy()
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:145: TracerWarning: torch.from_numpy results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  delta_x = torch.from_numpy(delta_x)
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:147: TracerWarning: Converting a tensor to a NumPy array might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  delta_y = np.array([each['can_bus'][1].cpu().numpy()
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:149: TracerWarning: torch.from_numpy results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  delta_y = torch.from_numpy(delta_y)
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:151: TracerWarning: Converting a tensor to a Python float might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  ego_angle = np.array(
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:153: TracerWarning: torch.from_numpy results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  ego_angle = torch.from_numpy(ego_angle.astype(np.float32))
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:190: TracerWarning: Converting a tensor to a NumPy array might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  [each['can_bus'].cpu().numpy() for each in kwargs['img_metas']])  # [:, :]
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:189: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  can_bus = bev_queries.new_tensor(
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:209: TracerWarning: torch.as_tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  spatial_shapes = torch.as_tensor(
/home/ava/anaconda3/envs/rajkumar/lib/python3.8/site-packages/torch/functional.py:478: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2894.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/encoder.py:375: TracerWarning: torch.tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  spatial_shapes=torch.tensor(
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/encoder.py:377: TracerWarning: torch.tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  level_start_index=torch.tensor([0], device=query.device),
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/temporal_self_attention.py:194: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (spatial_shapes[:, 0] * spatial_shapes[:, 1]).sum() == num_value
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/temporal_self_attention.py:224: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if reference_points.shape[-1] == 2:
/home/ava/anaconda3/envs/rajkumar/lib/python3.8/site-packages/mmcv/ops/multi_scale_deform_attn.py:124: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  value_list = value.split([H_ * W_ for H_, W_ in value_spatial_shapes],
/home/ava/anaconda3/envs/rajkumar/lib/python3.8/site-packages/mmcv/ops/multi_scale_deform_attn.py:128: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  for level, (H_, W_) in enumerate(value_spatial_shapes):
@@ tensor([[[-0.0692, -1.0243, -1.5323,  ...,  0.7724, -0.3280, -1.5587],
         [-0.0359,  0.2042, -0.0875,  ..., -0.6864,  0.9596,  0.0883],
         [ 0.8283,  1.1183, -0.1857,  ...,  0.7318,  1.1466,  0.3542],
         ...,
         [-1.7474,  1.8111, -0.5815,  ...,  0.5878,  1.2135,  0.3253],
         [-0.2032,  0.7426,  0.7930,  ..., -0.0521, -0.3611, -0.1208],
         [-0.2343,  0.0740, -0.0624,  ..., -0.8883,  0.8339,  0.1615]]]) torch.Size([1, 2500, 256]) tensor([[[[ 5.9792e-01, -4.8126e-01, -3.2352e-01,  ...,  6.2834e-01,
            6.8969e-01,  1.1347e+00]],

         [[-2.4157e-01,  1.9641e-01, -5.7206e-01,  ...,  8.0119e-01,
            5.0721e-01,  1.1817e+00]],

         [[-3.5227e-02, -4.3385e-01, -6.5339e-02,  ...,  7.4394e-01,
            3.1284e-01,  1.3502e+00]],

         ...,

         [[-2.9474e-01,  5.9223e-01, -1.3956e+00,  ..., -2.3192e-01,
            6.9876e-01,  7.7381e-01]],

         [[-1.8471e-02,  4.7979e-01, -1.4278e+00,  ...,  5.1946e-01,
            8.3468e-01,  4.3934e-01]],

         [[ 2.9920e-01, -4.3340e-01, -5.9113e-01,  ...,  1.0453e+00,
            8.2316e-01,  5.3841e-01]]],


        [[[-5.0628e-01, -1.6901e-01, -2.9417e-01,  ...,  1.4568e+00,
            1.5463e+00,  3.2410e+00]],

         [[ 1.9946e-01,  5.5797e-01, -4.6248e-01,  ...,  2.0408e-01,
            7.7422e-01,  2.8938e+00]],

         [[-2.3970e-01,  9.4032e-02, -3.2769e-01,  ...,  1.4844e+00,
            1.3290e+00,  3.0470e+00]],

         ...,

         [[ 9.7726e-01,  1.0396e+00, -1.5998e-04,  ...,  2.5447e+00,
            1.8597e+00,  2.9086e+00]],

         [[ 1.2143e+00,  3.5815e+00, -4.2121e-01,  ...,  2.4103e+00,
            1.4564e+00,  3.9619e+00]],

         [[ 1.1321e+00,  2.5492e+00,  1.9070e-01,  ...,  1.7542e+00,
            2.0327e-01,  3.0339e+00]]],


        [[[-3.4350e-01,  3.6802e-01,  2.3324e-01,  ..., -1.1752e-01,
           -1.4116e+00,  1.1068e+00]],

         [[-5.1576e-01,  4.7677e-01, -3.3855e-03,  ..., -4.0339e-01,
           -1.1366e+00,  1.0260e+00]],

         [[-3.4744e-01,  1.0805e-01,  4.0055e-01,  ..., -2.5230e-01,
           -1.0664e+00,  9.4769e-01]],

         ...,

         [[-1.1653e+00,  5.4161e-01, -7.0555e-01,  ..., -1.0570e+00,
           -1.0388e+00,  1.3206e+00]],

         [[-1.1619e+00,  7.2963e-01, -9.3389e-01,  ..., -9.4912e-01,
           -9.5996e-01,  1.3135e+00]],

         [[-6.1750e-01,  2.1981e-02, -1.1703e-01,  ..., -3.1704e-01,
           -1.4295e+00,  1.2898e+00]]],


        [[[-3.7267e-01, -1.6975e+00, -3.9942e-01,  ...,  1.3464e+00,
           -1.2175e+00,  4.7708e-01]],

         [[-2.0136e-01, -1.4968e+00, -6.9495e-01,  ...,  6.3891e-01,
           -9.4623e-01,  1.7334e-01]],

         [[-3.0778e-01, -1.8394e+00, -4.4608e-01,  ...,  8.4153e-01,
           -1.0304e+00,  2.1146e-01]],

         ...,

         [[-1.1454e+00, -2.0540e-01, -1.6219e+00,  ..., -1.2814e-01,
           -1.2195e+00,  1.6333e+00]],

         [[-9.8370e-01, -2.4320e-01, -2.1621e+00,  ...,  2.4822e-01,
           -1.0177e+00,  2.1811e+00]],

         [[-4.5920e-01, -1.1781e+00, -1.1664e+00,  ...,  1.0799e+00,
           -1.3336e+00,  1.4252e+00]]],


        [[[ 1.5720e+00, -2.9789e-01,  9.1371e-01,  ..., -2.8282e-01,
           -1.7120e-01,  2.3297e+00]],

         [[ 1.2224e+00, -9.3539e-01,  1.1799e-01,  ..., -5.8252e-01,
            3.3514e-01,  1.9569e+00]],

         [[ 5.3769e-01, -1.5938e+00, -5.5409e-01,  ..., -1.0307e+00,
            2.2999e-01,  1.8672e+00]],

         ...,

         [[ 1.2376e+00, -8.2182e-01,  4.0195e-01,  ..., -2.1291e-02,
           -2.7246e-01,  1.4273e+00]],

         [[ 7.8491e-01, -8.8231e-01,  2.5364e-01,  ...,  3.1898e-01,
           -2.4907e-01,  7.9413e-01]],

         [[ 8.9071e-01, -1.2539e+00,  6.3538e-01,  ...,  6.3550e-01,
           -2.8259e-01,  1.1945e+00]]],


        [[[ 4.1723e-01, -6.7326e-01, -5.3956e-02,  ...,  1.9507e+00,
            1.0088e+00,  2.4715e+00]],

         [[ 8.8778e-01,  5.2749e-01,  3.2656e-01,  ...,  2.1128e+00,
            6.7408e-01,  1.6133e+00]],

         [[ 7.1528e-01,  2.7949e-01,  1.3660e+00,  ...,  1.6165e+00,
            5.2043e-01,  1.7236e+00]],

         ...,

         [[ 4.8156e-01,  3.5478e-01,  4.0128e-02,  ...,  3.1051e-01,
            9.4616e-01,  1.9903e+00]],

         [[-7.1233e-02,  1.5719e-01,  1.1237e-01,  ...,  1.0358e-01,
            9.2093e-01,  1.2332e+00]],

         [[ 1.5667e-01, -6.6589e-01,  7.2804e-01,  ...,  7.3006e-01,
           -2.6699e-01,  1.3334e+00]]]]) torch.Size([6, 375, 1, 256]) tensor([[[[ 5.9792e-01, -4.8126e-01, -3.2352e-01,  ...,  6.2834e-01,
            6.8969e-01,  1.1347e+00]],

         [[-2.4157e-01,  1.9641e-01, -5.7206e-01,  ...,  8.0119e-01,
            5.0721e-01,  1.1817e+00]],

         [[-3.5227e-02, -4.3385e-01, -6.5339e-02,  ...,  7.4394e-01,
            3.1284e-01,  1.3502e+00]],

         ...,

         [[-2.9474e-01,  5.9223e-01, -1.3956e+00,  ..., -2.3192e-01,
            6.9876e-01,  7.7381e-01]],

         [[-1.8471e-02,  4.7979e-01, -1.4278e+00,  ...,  5.1946e-01,
            8.3468e-01,  4.3934e-01]],

         [[ 2.9920e-01, -4.3340e-01, -5.9113e-01,  ...,  1.0453e+00,
            8.2316e-01,  5.3841e-01]]],


        [[[-5.0628e-01, -1.6901e-01, -2.9417e-01,  ...,  1.4568e+00,
            1.5463e+00,  3.2410e+00]],

         [[ 1.9946e-01,  5.5797e-01, -4.6248e-01,  ...,  2.0408e-01,
            7.7422e-01,  2.8938e+00]],

         [[-2.3970e-01,  9.4032e-02, -3.2769e-01,  ...,  1.4844e+00,
            1.3290e+00,  3.0470e+00]],

         ...,

         [[ 9.7726e-01,  1.0396e+00, -1.5998e-04,  ...,  2.5447e+00,
            1.8597e+00,  2.9086e+00]],

         [[ 1.2143e+00,  3.5815e+00, -4.2121e-01,  ...,  2.4103e+00,
            1.4564e+00,  3.9619e+00]],

         [[ 1.1321e+00,  2.5492e+00,  1.9070e-01,  ...,  1.7542e+00,
            2.0327e-01,  3.0339e+00]]],


        [[[-3.4350e-01,  3.6802e-01,  2.3324e-01,  ..., -1.1752e-01,
           -1.4116e+00,  1.1068e+00]],

         [[-5.1576e-01,  4.7677e-01, -3.3855e-03,  ..., -4.0339e-01,
           -1.1366e+00,  1.0260e+00]],

         [[-3.4744e-01,  1.0805e-01,  4.0055e-01,  ..., -2.5230e-01,
           -1.0664e+00,  9.4769e-01]],

         ...,

         [[-1.1653e+00,  5.4161e-01, -7.0555e-01,  ..., -1.0570e+00,
           -1.0388e+00,  1.3206e+00]],

         [[-1.1619e+00,  7.2963e-01, -9.3389e-01,  ..., -9.4912e-01,
           -9.5996e-01,  1.3135e+00]],

         [[-6.1750e-01,  2.1981e-02, -1.1703e-01,  ..., -3.1704e-01,
           -1.4295e+00,  1.2898e+00]]],


        [[[-3.7267e-01, -1.6975e+00, -3.9942e-01,  ...,  1.3464e+00,
           -1.2175e+00,  4.7708e-01]],

         [[-2.0136e-01, -1.4968e+00, -6.9495e-01,  ...,  6.3891e-01,
           -9.4623e-01,  1.7334e-01]],

         [[-3.0778e-01, -1.8394e+00, -4.4608e-01,  ...,  8.4153e-01,
           -1.0304e+00,  2.1146e-01]],

         ...,

         [[-1.1454e+00, -2.0540e-01, -1.6219e+00,  ..., -1.2814e-01,
           -1.2195e+00,  1.6333e+00]],

         [[-9.8370e-01, -2.4320e-01, -2.1621e+00,  ...,  2.4822e-01,
           -1.0177e+00,  2.1811e+00]],

         [[-4.5920e-01, -1.1781e+00, -1.1664e+00,  ...,  1.0799e+00,
           -1.3336e+00,  1.4252e+00]]],


        [[[ 1.5720e+00, -2.9789e-01,  9.1371e-01,  ..., -2.8282e-01,
           -1.7120e-01,  2.3297e+00]],

         [[ 1.2224e+00, -9.3539e-01,  1.1799e-01,  ..., -5.8252e-01,
            3.3514e-01,  1.9569e+00]],

         [[ 5.3769e-01, -1.5938e+00, -5.5409e-01,  ..., -1.0307e+00,
            2.2999e-01,  1.8672e+00]],

         ...,

         [[ 1.2376e+00, -8.2182e-01,  4.0195e-01,  ..., -2.1291e-02,
           -2.7246e-01,  1.4273e+00]],

         [[ 7.8491e-01, -8.8231e-01,  2.5364e-01,  ...,  3.1898e-01,
           -2.4907e-01,  7.9413e-01]],

         [[ 8.9071e-01, -1.2539e+00,  6.3538e-01,  ...,  6.3550e-01,
           -2.8259e-01,  1.1945e+00]]],


        [[[ 4.1723e-01, -6.7326e-01, -5.3956e-02,  ...,  1.9507e+00,
            1.0088e+00,  2.4715e+00]],

         [[ 8.8778e-01,  5.2749e-01,  3.2656e-01,  ...,  2.1128e+00,
            6.7408e-01,  1.6133e+00]],

         [[ 7.1528e-01,  2.7949e-01,  1.3660e+00,  ...,  1.6165e+00,
            5.2043e-01,  1.7236e+00]],

         ...,

         [[ 4.8156e-01,  3.5478e-01,  4.0128e-02,  ...,  3.1051e-01,
            9.4616e-01,  1.9903e+00]],

         [[-7.1233e-02,  1.5719e-01,  1.1237e-01,  ...,  1.0358e-01,
            9.2093e-01,  1.2332e+00]],

         [[ 1.5667e-01, -6.6589e-01,  7.2804e-01,  ...,  7.3006e-01,
           -2.6699e-01,  1.3334e+00]]]]) torch.Size([6, 375, 1, 256]) None None None tensor([[[[0.0100, 0.0100, 0.0625],
          [0.0300, 0.0100, 0.0625],
          [0.0500, 0.0100, 0.0625],
          ...,
          [0.9500, 0.9900, 0.0625],
          [0.9700, 0.9900, 0.0625],
          [0.9900, 0.9900, 0.0625]],

         [[0.0100, 0.0100, 0.3542],
          [0.0300, 0.0100, 0.3542],
          [0.0500, 0.0100, 0.3542],
          ...,
          [0.9500, 0.9900, 0.3542],
          [0.9700, 0.9900, 0.3542],
          [0.9900, 0.9900, 0.3542]],

         [[0.0100, 0.0100, 0.6458],
          [0.0300, 0.0100, 0.6458],
          [0.0500, 0.0100, 0.6458],
          ...,
          [0.9500, 0.9900, 0.6458],
          [0.9700, 0.9900, 0.6458],
          [0.9900, 0.9900, 0.6458]],

         [[0.0100, 0.0100, 0.9375],
          [0.0300, 0.0100, 0.9375],
          [0.0500, 0.0100, 0.9375],
          ...,
          [0.9500, 0.9900, 0.9375],
          [0.9700, 0.9900, 0.9375],
          [0.9900, 0.9900, 0.9375]]]]) torch.Size([1, 4, 2500, 3]) tensor([[15, 25]]) torch.Size([1, 2]) tensor([[[[[-6.5657e+06, -2.2032e+06],
           [-6.5609e+06, -2.5011e+06],
           [-6.5561e+06, -2.7990e+06],
           [-6.5513e+06, -3.0968e+06]],

          [[-6.4066e+06, -2.2071e+06],
           [-6.4018e+06, -2.5050e+06],
           [-6.3970e+06, -2.8029e+06],
           [-6.3922e+06, -3.1007e+06]],

          [[-6.2474e+06, -2.2110e+06],
           [-6.2427e+06, -2.5089e+06],
           [-6.2379e+06, -2.8067e+06],
           [-6.2331e+06, -3.1046e+06]],

          ...,

          [[ 1.2650e+00,  6.5975e-01],
           [ 1.2627e+00,  5.9728e-01],
           [ 1.2604e+00,  5.3514e-01],
           [ 1.2582e+00,  4.7331e-01]],

          [[ 1.2982e+00,  6.5928e-01],
           [ 1.2958e+00,  5.9678e-01],
           [ 1.2934e+00,  5.3461e-01],
           [ 1.2911e+00,  4.7275e-01]],

          [[ 1.3314e+00,  6.5880e-01],
           [ 1.3289e+00,  5.9628e-01],
           [ 1.3265e+00,  5.3408e-01],
           [ 1.3241e+00,  4.7219e-01]]]],



        [[[[-2.3560e+06, -3.1485e+06],
           [-2.3618e+06, -3.4498e+06],
           [-2.3677e+06, -3.7511e+06],
           [-2.3736e+06, -4.0525e+06]],

          [[-2.1813e+06, -3.0675e+06],
           [-2.1871e+06, -3.3688e+06],
           [-2.1930e+06, -3.6702e+06],
           [-2.1989e+06, -3.9715e+06]],

          [[-2.0065e+06, -2.9865e+06],
           [-2.0124e+06, -3.2879e+06],
           [-2.0183e+06, -3.5892e+06],
           [-2.0242e+06, -3.8906e+06]],

          ...,

          [[ 3.0322e-01,  6.1591e-01],
           [ 3.0197e-01,  5.6890e-01],
           [ 3.0072e-01,  5.2201e-01],
           [ 2.9947e-01,  4.7522e-01]],

          [[ 3.2155e-01,  6.1210e-01],
           [ 3.2031e-01,  5.6631e-01],
           [ 3.1907e-01,  5.2063e-01],
           [ 3.1784e-01,  4.7505e-01]],

          [[ 3.3896e-01,  6.0848e-01],
           [ 3.3773e-01,  5.6385e-01],
           [ 3.3650e-01,  5.1932e-01],
           [ 3.3528e-01,  4.7489e-01]]]],



        [[[[-3.9792e+00,  7.1230e-01],
           [-3.9388e+00,  4.6221e-01],
           [-3.8992e+00,  2.1599e-01],
           [-3.8601e+00, -2.6433e-02]],

          [[-4.6132e+00,  7.4754e-01],
           [-4.5608e+00,  4.5739e-01],
           [-4.5092e+00,  1.7245e-01],
           [-4.4586e+00, -1.0742e-01]],

          [[-5.4895e+00,  7.9624e-01],
           [-5.4176e+00,  4.5076e-01],
           [-5.3473e+00,  1.1264e-01],
           [-5.2785e+00, -2.1835e-01]],

          ...,

          [[ 4.7664e+06,  3.1539e+05],
           [ 4.7777e+06,  1.4617e+04],
           [ 4.7890e+06, -2.8615e+05],
           [ 4.8003e+06, -5.8692e+05]],

          [[ 4.7705e+06,  2.3233e+05],
           [ 4.7818e+06, -6.8438e+04],
           [ 4.7932e+06, -3.6921e+05],
           [ 4.8045e+06, -6.6998e+05]],

          [[ 4.7747e+06,  1.4928e+05],
           [ 4.7860e+06, -1.5149e+05],
           [ 4.7973e+06, -4.5226e+05],
           [ 4.8086e+06, -7.5303e+05]]]],



        [[[[ 1.0344e+00,  5.4152e-01],
           [ 1.0355e+00,  5.0260e-01],
           [ 1.0366e+00,  4.6354e-01],
           [ 1.0377e+00,  4.2433e-01]],

          [[ 1.0140e+00,  5.4124e-01],
           [ 1.0151e+00,  5.0231e-01],
           [ 1.0162e+00,  4.6323e-01],
           [ 1.0173e+00,  4.2401e-01]],

          [[ 9.9364e-01,  5.4096e-01],
           [ 9.9469e-01,  5.0202e-01],
           [ 9.9575e-01,  4.6293e-01],
           [ 9.9681e-01,  4.2369e-01]],

          ...,

          [[-5.0303e+06, -2.0712e+06],
           [-5.0342e+06, -2.2692e+06],
           [-5.0380e+06, -2.4673e+06],
           [-5.0419e+06, -2.6653e+06]],

          [[-5.1332e+06, -2.0735e+06],
           [-5.1371e+06, -2.2715e+06],
           [-5.1409e+06, -2.4696e+06],
           [-5.1448e+06, -2.6677e+06]],

          [[-5.2361e+06, -2.0758e+06],
           [-5.2400e+06, -2.2738e+06],
           [-5.2439e+06, -2.4719e+06],
           [-5.2477e+06, -2.6700e+06]]]],



        [[[[ 1.2223e-01,  5.5164e-01],
           [ 1.2345e-01,  5.0336e-01],
           [ 1.2467e-01,  4.5509e-01],
           [ 1.2588e-01,  4.0684e-01]],

          [[ 1.0129e-01,  5.5301e-01],
           [ 1.0255e-01,  5.0320e-01],
           [ 1.0380e-01,  4.5340e-01],
           [ 1.0506e-01,  4.0361e-01]],

          [[ 7.8972e-02,  5.5447e-01],
           [ 8.0273e-02,  5.0302e-01],
           [ 8.1574e-02,  4.5159e-01],
           [ 8.2874e-02,  4.0017e-01]],

          ...,

          [[-5.7603e+05, -2.2280e+06],
           [-5.6826e+05, -2.5324e+06],
           [-5.6049e+05, -2.8368e+06],
           [-5.5272e+05, -3.1412e+06]],

          [[-7.2791e+05, -2.3267e+06],
           [-7.2014e+05, -2.6311e+06],
           [-7.1237e+05, -2.9355e+06],
           [-7.0460e+05, -3.2399e+06]],

          [[-8.7979e+05, -2.4254e+06],
           [-8.7202e+05, -2.7298e+06],
           [-8.6425e+05, -3.0342e+06],
           [-8.5648e+05, -3.3386e+06]]]],



        [[[[ 3.7130e+06, -1.1577e+06],
           [ 3.7043e+06, -1.4616e+06],
           [ 3.6956e+06, -1.7655e+06],
           [ 3.6870e+06, -2.0694e+06]],

          [[ 3.7495e+06, -1.0628e+06],
           [ 3.7408e+06, -1.3667e+06],
           [ 3.7321e+06, -1.6706e+06],
           [ 3.7235e+06, -1.9745e+06]],

          [[ 3.7860e+06, -9.6792e+05],
           [ 3.7773e+06, -1.2718e+06],
           [ 3.7686e+06, -1.5757e+06],
           [ 3.7600e+06, -1.8797e+06]],

          ...,

          [[-1.6497e+00,  8.7903e-01],
           [-1.6541e+00,  7.4690e-01],
           [-1.6585e+00,  6.1467e-01],
           [-1.6630e+00,  4.8235e-01]],

          [[-1.5094e+00,  8.5026e-01],
           [-1.5134e+00,  7.2819e-01],
           [-1.5174e+00,  6.0603e-01],
           [-1.5215e+00,  4.8379e-01]],

          [[-1.3889e+00,  8.2556e-01],
           [-1.3926e+00,  7.1213e-01],
           [-1.3963e+00,  5.9862e-01],
           [-1.4000e+00,  4.8504e-01]]]]]) torch.Size([6, 1, 2500, 4, 2]) tensor([[[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [ True,  True,  True,  True],
          [ True,  True,  True,  True],
          [ True,  True,  True,  True]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [ True,  True,  True,  True],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[ True,  True,  True,  True],
          [ True,  True,  True,  True],
          [ True,  True,  True,  True],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]]]) torch.Size([6, 1, 2500, 4]) tensor([0]) torch.Size([1]) encoder
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:150: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  for i, mask_per_img in enumerate(bev_mask):
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:153: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  max_len = max([len(each) for each in indexes])
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:162: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  for i, reference_points_per_img in enumerate(reference_points_cam):
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:164: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  queries_rebatch[j, i, :len(index_query_per_img)] = query[j, index_query_per_img]
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:165: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  reference_points_rebatch[j, i, :len(index_query_per_img)] = reference_points_per_img[j, index_query_per_img]
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:344: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (spatial_shapes[:, 0] * spatial_shapes[:, 1]).sum() == num_value
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:362: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if reference_points.shape[-1] == 2:
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  bs, num_query, num_heads, num_levels, num_all_points // num_Z_anchors, num_Z_anchors, xy)
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:381: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert num_all_points == num_points * num_Z_anchors
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/spatial_cross_attention.py:179: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  slots[j, index_query_per_img] += queries[j, i, :len(index_query_per_img)]
/home/ava/anaconda3/envs/rajkumar/lib/python3.8/site-packages/mmcv/cnn/bricks/wrappers.py:170: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if x.numel() == 0 and obsolete_torch_version(TORCH_VERSION, (1, 5)):
@@ tensor([[[ 0.2653, -0.2243, -1.3323,  ...,  0.9449, -0.8728,  1.1871],
         [ 0.0305, -0.0553, -0.8757,  ...,  0.5642, -0.8969,  0.9591],
         [ 0.2948,  0.7406, -1.0450,  ...,  1.4680, -0.5175,  0.8721],
         ...,
         [-1.9096,  0.6918, -0.7312,  ...,  1.2741, -1.6874,  1.2229],
         [-1.1443,  0.3244, -1.0227,  ...,  1.0831, -2.3400,  1.5011],
         [-1.3504,  0.3077, -0.5410,  ...,  0.4003, -1.8177,  1.4600]]]) torch.Size([1, 2500, 256]) tensor([[[[ 5.9792e-01, -4.8126e-01, -3.2352e-01,  ...,  6.2834e-01,
            6.8969e-01,  1.1347e+00]],

         [[-2.4157e-01,  1.9641e-01, -5.7206e-01,  ...,  8.0119e-01,
            5.0721e-01,  1.1817e+00]],

         [[-3.5227e-02, -4.3385e-01, -6.5339e-02,  ...,  7.4394e-01,
            3.1284e-01,  1.3502e+00]],

         ...,

         [[-2.9474e-01,  5.9223e-01, -1.3956e+00,  ..., -2.3192e-01,
            6.9876e-01,  7.7381e-01]],

         [[-1.8471e-02,  4.7979e-01, -1.4278e+00,  ...,  5.1946e-01,
            8.3468e-01,  4.3934e-01]],

         [[ 2.9920e-01, -4.3340e-01, -5.9113e-01,  ...,  1.0453e+00,
            8.2316e-01,  5.3841e-01]]],


        [[[-5.0628e-01, -1.6901e-01, -2.9417e-01,  ...,  1.4568e+00,
            1.5463e+00,  3.2410e+00]],

         [[ 1.9946e-01,  5.5797e-01, -4.6248e-01,  ...,  2.0408e-01,
            7.7422e-01,  2.8938e+00]],

         [[-2.3970e-01,  9.4032e-02, -3.2769e-01,  ...,  1.4844e+00,
            1.3290e+00,  3.0470e+00]],

         ...,

         [[ 9.7726e-01,  1.0396e+00, -1.5998e-04,  ...,  2.5447e+00,
            1.8597e+00,  2.9086e+00]],

         [[ 1.2143e+00,  3.5815e+00, -4.2121e-01,  ...,  2.4103e+00,
            1.4564e+00,  3.9619e+00]],

         [[ 1.1321e+00,  2.5492e+00,  1.9070e-01,  ...,  1.7542e+00,
            2.0327e-01,  3.0339e+00]]],


        [[[-3.4350e-01,  3.6802e-01,  2.3324e-01,  ..., -1.1752e-01,
           -1.4116e+00,  1.1068e+00]],

         [[-5.1576e-01,  4.7677e-01, -3.3855e-03,  ..., -4.0339e-01,
           -1.1366e+00,  1.0260e+00]],

         [[-3.4744e-01,  1.0805e-01,  4.0055e-01,  ..., -2.5230e-01,
           -1.0664e+00,  9.4769e-01]],

         ...,

         [[-1.1653e+00,  5.4161e-01, -7.0555e-01,  ..., -1.0570e+00,
           -1.0388e+00,  1.3206e+00]],

         [[-1.1619e+00,  7.2963e-01, -9.3389e-01,  ..., -9.4912e-01,
           -9.5996e-01,  1.3135e+00]],

         [[-6.1750e-01,  2.1981e-02, -1.1703e-01,  ..., -3.1704e-01,
           -1.4295e+00,  1.2898e+00]]],


        [[[-3.7267e-01, -1.6975e+00, -3.9942e-01,  ...,  1.3464e+00,
           -1.2175e+00,  4.7708e-01]],

         [[-2.0136e-01, -1.4968e+00, -6.9495e-01,  ...,  6.3891e-01,
           -9.4623e-01,  1.7334e-01]],

         [[-3.0778e-01, -1.8394e+00, -4.4608e-01,  ...,  8.4153e-01,
           -1.0304e+00,  2.1146e-01]],

         ...,

         [[-1.1454e+00, -2.0540e-01, -1.6219e+00,  ..., -1.2814e-01,
           -1.2195e+00,  1.6333e+00]],

         [[-9.8370e-01, -2.4320e-01, -2.1621e+00,  ...,  2.4822e-01,
           -1.0177e+00,  2.1811e+00]],

         [[-4.5920e-01, -1.1781e+00, -1.1664e+00,  ...,  1.0799e+00,
           -1.3336e+00,  1.4252e+00]]],


        [[[ 1.5720e+00, -2.9789e-01,  9.1371e-01,  ..., -2.8282e-01,
           -1.7120e-01,  2.3297e+00]],

         [[ 1.2224e+00, -9.3539e-01,  1.1799e-01,  ..., -5.8252e-01,
            3.3514e-01,  1.9569e+00]],

         [[ 5.3769e-01, -1.5938e+00, -5.5409e-01,  ..., -1.0307e+00,
            2.2999e-01,  1.8672e+00]],

         ...,

         [[ 1.2376e+00, -8.2182e-01,  4.0195e-01,  ..., -2.1291e-02,
           -2.7246e-01,  1.4273e+00]],

         [[ 7.8491e-01, -8.8231e-01,  2.5364e-01,  ...,  3.1898e-01,
           -2.4907e-01,  7.9413e-01]],

         [[ 8.9071e-01, -1.2539e+00,  6.3538e-01,  ...,  6.3550e-01,
           -2.8259e-01,  1.1945e+00]]],


        [[[ 4.1723e-01, -6.7326e-01, -5.3956e-02,  ...,  1.9507e+00,
            1.0088e+00,  2.4715e+00]],

         [[ 8.8778e-01,  5.2749e-01,  3.2656e-01,  ...,  2.1128e+00,
            6.7408e-01,  1.6133e+00]],

         [[ 7.1528e-01,  2.7949e-01,  1.3660e+00,  ...,  1.6165e+00,
            5.2043e-01,  1.7236e+00]],

         ...,

         [[ 4.8156e-01,  3.5478e-01,  4.0128e-02,  ...,  3.1051e-01,
            9.4616e-01,  1.9903e+00]],

         [[-7.1233e-02,  1.5719e-01,  1.1237e-01,  ...,  1.0358e-01,
            9.2093e-01,  1.2332e+00]],

         [[ 1.5667e-01, -6.6589e-01,  7.2804e-01,  ...,  7.3006e-01,
           -2.6699e-01,  1.3334e+00]]]]) torch.Size([6, 375, 1, 256]) tensor([[[[ 5.9792e-01, -4.8126e-01, -3.2352e-01,  ...,  6.2834e-01,
            6.8969e-01,  1.1347e+00]],

         [[-2.4157e-01,  1.9641e-01, -5.7206e-01,  ...,  8.0119e-01,
            5.0721e-01,  1.1817e+00]],

         [[-3.5227e-02, -4.3385e-01, -6.5339e-02,  ...,  7.4394e-01,
            3.1284e-01,  1.3502e+00]],

         ...,

         [[-2.9474e-01,  5.9223e-01, -1.3956e+00,  ..., -2.3192e-01,
            6.9876e-01,  7.7381e-01]],

         [[-1.8471e-02,  4.7979e-01, -1.4278e+00,  ...,  5.1946e-01,
            8.3468e-01,  4.3934e-01]],

         [[ 2.9920e-01, -4.3340e-01, -5.9113e-01,  ...,  1.0453e+00,
            8.2316e-01,  5.3841e-01]]],


        [[[-5.0628e-01, -1.6901e-01, -2.9417e-01,  ...,  1.4568e+00,
            1.5463e+00,  3.2410e+00]],

         [[ 1.9946e-01,  5.5797e-01, -4.6248e-01,  ...,  2.0408e-01,
            7.7422e-01,  2.8938e+00]],

         [[-2.3970e-01,  9.4032e-02, -3.2769e-01,  ...,  1.4844e+00,
            1.3290e+00,  3.0470e+00]],

         ...,

         [[ 9.7726e-01,  1.0396e+00, -1.5998e-04,  ...,  2.5447e+00,
            1.8597e+00,  2.9086e+00]],

         [[ 1.2143e+00,  3.5815e+00, -4.2121e-01,  ...,  2.4103e+00,
            1.4564e+00,  3.9619e+00]],

         [[ 1.1321e+00,  2.5492e+00,  1.9070e-01,  ...,  1.7542e+00,
            2.0327e-01,  3.0339e+00]]],


        [[[-3.4350e-01,  3.6802e-01,  2.3324e-01,  ..., -1.1752e-01,
           -1.4116e+00,  1.1068e+00]],

         [[-5.1576e-01,  4.7677e-01, -3.3855e-03,  ..., -4.0339e-01,
           -1.1366e+00,  1.0260e+00]],

         [[-3.4744e-01,  1.0805e-01,  4.0055e-01,  ..., -2.5230e-01,
           -1.0664e+00,  9.4769e-01]],

         ...,

         [[-1.1653e+00,  5.4161e-01, -7.0555e-01,  ..., -1.0570e+00,
           -1.0388e+00,  1.3206e+00]],

         [[-1.1619e+00,  7.2963e-01, -9.3389e-01,  ..., -9.4912e-01,
           -9.5996e-01,  1.3135e+00]],

         [[-6.1750e-01,  2.1981e-02, -1.1703e-01,  ..., -3.1704e-01,
           -1.4295e+00,  1.2898e+00]]],


        [[[-3.7267e-01, -1.6975e+00, -3.9942e-01,  ...,  1.3464e+00,
           -1.2175e+00,  4.7708e-01]],

         [[-2.0136e-01, -1.4968e+00, -6.9495e-01,  ...,  6.3891e-01,
           -9.4623e-01,  1.7334e-01]],

         [[-3.0778e-01, -1.8394e+00, -4.4608e-01,  ...,  8.4153e-01,
           -1.0304e+00,  2.1146e-01]],

         ...,

         [[-1.1454e+00, -2.0540e-01, -1.6219e+00,  ..., -1.2814e-01,
           -1.2195e+00,  1.6333e+00]],

         [[-9.8370e-01, -2.4320e-01, -2.1621e+00,  ...,  2.4822e-01,
           -1.0177e+00,  2.1811e+00]],

         [[-4.5920e-01, -1.1781e+00, -1.1664e+00,  ...,  1.0799e+00,
           -1.3336e+00,  1.4252e+00]]],


        [[[ 1.5720e+00, -2.9789e-01,  9.1371e-01,  ..., -2.8282e-01,
           -1.7120e-01,  2.3297e+00]],

         [[ 1.2224e+00, -9.3539e-01,  1.1799e-01,  ..., -5.8252e-01,
            3.3514e-01,  1.9569e+00]],

         [[ 5.3769e-01, -1.5938e+00, -5.5409e-01,  ..., -1.0307e+00,
            2.2999e-01,  1.8672e+00]],

         ...,

         [[ 1.2376e+00, -8.2182e-01,  4.0195e-01,  ..., -2.1291e-02,
           -2.7246e-01,  1.4273e+00]],

         [[ 7.8491e-01, -8.8231e-01,  2.5364e-01,  ...,  3.1898e-01,
           -2.4907e-01,  7.9413e-01]],

         [[ 8.9071e-01, -1.2539e+00,  6.3538e-01,  ...,  6.3550e-01,
           -2.8259e-01,  1.1945e+00]]],


        [[[ 4.1723e-01, -6.7326e-01, -5.3956e-02,  ...,  1.9507e+00,
            1.0088e+00,  2.4715e+00]],

         [[ 8.8778e-01,  5.2749e-01,  3.2656e-01,  ...,  2.1128e+00,
            6.7408e-01,  1.6133e+00]],

         [[ 7.1528e-01,  2.7949e-01,  1.3660e+00,  ...,  1.6165e+00,
            5.2043e-01,  1.7236e+00]],

         ...,

         [[ 4.8156e-01,  3.5478e-01,  4.0128e-02,  ...,  3.1051e-01,
            9.4616e-01,  1.9903e+00]],

         [[-7.1233e-02,  1.5719e-01,  1.1237e-01,  ...,  1.0358e-01,
            9.2093e-01,  1.2332e+00]],

         [[ 1.5667e-01, -6.6589e-01,  7.2804e-01,  ...,  7.3006e-01,
           -2.6699e-01,  1.3334e+00]]]]) torch.Size([6, 375, 1, 256]) None None None tensor([[[[0.0100, 0.0100, 0.0625],
          [0.0300, 0.0100, 0.0625],
          [0.0500, 0.0100, 0.0625],
          ...,
          [0.9500, 0.9900, 0.0625],
          [0.9700, 0.9900, 0.0625],
          [0.9900, 0.9900, 0.0625]],

         [[0.0100, 0.0100, 0.3542],
          [0.0300, 0.0100, 0.3542],
          [0.0500, 0.0100, 0.3542],
          ...,
          [0.9500, 0.9900, 0.3542],
          [0.9700, 0.9900, 0.3542],
          [0.9900, 0.9900, 0.3542]],

         [[0.0100, 0.0100, 0.6458],
          [0.0300, 0.0100, 0.6458],
          [0.0500, 0.0100, 0.6458],
          ...,
          [0.9500, 0.9900, 0.6458],
          [0.9700, 0.9900, 0.6458],
          [0.9900, 0.9900, 0.6458]],

         [[0.0100, 0.0100, 0.9375],
          [0.0300, 0.0100, 0.9375],
          [0.0500, 0.0100, 0.9375],
          ...,
          [0.9500, 0.9900, 0.9375],
          [0.9700, 0.9900, 0.9375],
          [0.9900, 0.9900, 0.9375]]]]) torch.Size([1, 4, 2500, 3]) tensor([[15, 25]]) torch.Size([1, 2]) tensor([[[[[-6.5657e+06, -2.2032e+06],
           [-6.5609e+06, -2.5011e+06],
           [-6.5561e+06, -2.7990e+06],
           [-6.5513e+06, -3.0968e+06]],

          [[-6.4066e+06, -2.2071e+06],
           [-6.4018e+06, -2.5050e+06],
           [-6.3970e+06, -2.8029e+06],
           [-6.3922e+06, -3.1007e+06]],

          [[-6.2474e+06, -2.2110e+06],
           [-6.2427e+06, -2.5089e+06],
           [-6.2379e+06, -2.8067e+06],
           [-6.2331e+06, -3.1046e+06]],

          ...,

          [[ 1.2650e+00,  6.5975e-01],
           [ 1.2627e+00,  5.9728e-01],
           [ 1.2604e+00,  5.3514e-01],
           [ 1.2582e+00,  4.7331e-01]],

          [[ 1.2982e+00,  6.5928e-01],
           [ 1.2958e+00,  5.9678e-01],
           [ 1.2934e+00,  5.3461e-01],
           [ 1.2911e+00,  4.7275e-01]],

          [[ 1.3314e+00,  6.5880e-01],
           [ 1.3289e+00,  5.9628e-01],
           [ 1.3265e+00,  5.3408e-01],
           [ 1.3241e+00,  4.7219e-01]]]],



        [[[[-2.3560e+06, -3.1485e+06],
           [-2.3618e+06, -3.4498e+06],
           [-2.3677e+06, -3.7511e+06],
           [-2.3736e+06, -4.0525e+06]],

          [[-2.1813e+06, -3.0675e+06],
           [-2.1871e+06, -3.3688e+06],
           [-2.1930e+06, -3.6702e+06],
           [-2.1989e+06, -3.9715e+06]],

          [[-2.0065e+06, -2.9865e+06],
           [-2.0124e+06, -3.2879e+06],
           [-2.0183e+06, -3.5892e+06],
           [-2.0242e+06, -3.8906e+06]],

          ...,

          [[ 3.0322e-01,  6.1591e-01],
           [ 3.0197e-01,  5.6890e-01],
           [ 3.0072e-01,  5.2201e-01],
           [ 2.9947e-01,  4.7522e-01]],

          [[ 3.2155e-01,  6.1210e-01],
           [ 3.2031e-01,  5.6631e-01],
           [ 3.1907e-01,  5.2063e-01],
           [ 3.1784e-01,  4.7505e-01]],

          [[ 3.3896e-01,  6.0848e-01],
           [ 3.3773e-01,  5.6385e-01],
           [ 3.3650e-01,  5.1932e-01],
           [ 3.3528e-01,  4.7489e-01]]]],



        [[[[-3.9792e+00,  7.1230e-01],
           [-3.9388e+00,  4.6221e-01],
           [-3.8992e+00,  2.1599e-01],
           [-3.8601e+00, -2.6433e-02]],

          [[-4.6132e+00,  7.4754e-01],
           [-4.5608e+00,  4.5739e-01],
           [-4.5092e+00,  1.7245e-01],
           [-4.4586e+00, -1.0742e-01]],

          [[-5.4895e+00,  7.9624e-01],
           [-5.4176e+00,  4.5076e-01],
           [-5.3473e+00,  1.1264e-01],
           [-5.2785e+00, -2.1835e-01]],

          ...,

          [[ 4.7664e+06,  3.1539e+05],
           [ 4.7777e+06,  1.4617e+04],
           [ 4.7890e+06, -2.8615e+05],
           [ 4.8003e+06, -5.8692e+05]],

          [[ 4.7705e+06,  2.3233e+05],
           [ 4.7818e+06, -6.8438e+04],
           [ 4.7932e+06, -3.6921e+05],
           [ 4.8045e+06, -6.6998e+05]],

          [[ 4.7747e+06,  1.4928e+05],
           [ 4.7860e+06, -1.5149e+05],
           [ 4.7973e+06, -4.5226e+05],
           [ 4.8086e+06, -7.5303e+05]]]],



        [[[[ 1.0344e+00,  5.4152e-01],
           [ 1.0355e+00,  5.0260e-01],
           [ 1.0366e+00,  4.6354e-01],
           [ 1.0377e+00,  4.2433e-01]],

          [[ 1.0140e+00,  5.4124e-01],
           [ 1.0151e+00,  5.0231e-01],
           [ 1.0162e+00,  4.6323e-01],
           [ 1.0173e+00,  4.2401e-01]],

          [[ 9.9364e-01,  5.4096e-01],
           [ 9.9469e-01,  5.0202e-01],
           [ 9.9575e-01,  4.6293e-01],
           [ 9.9681e-01,  4.2369e-01]],

          ...,

          [[-5.0303e+06, -2.0712e+06],
           [-5.0342e+06, -2.2692e+06],
           [-5.0380e+06, -2.4673e+06],
           [-5.0419e+06, -2.6653e+06]],

          [[-5.1332e+06, -2.0735e+06],
           [-5.1371e+06, -2.2715e+06],
           [-5.1409e+06, -2.4696e+06],
           [-5.1448e+06, -2.6677e+06]],

          [[-5.2361e+06, -2.0758e+06],
           [-5.2400e+06, -2.2738e+06],
           [-5.2439e+06, -2.4719e+06],
           [-5.2477e+06, -2.6700e+06]]]],



        [[[[ 1.2223e-01,  5.5164e-01],
           [ 1.2345e-01,  5.0336e-01],
           [ 1.2467e-01,  4.5509e-01],
           [ 1.2588e-01,  4.0684e-01]],

          [[ 1.0129e-01,  5.5301e-01],
           [ 1.0255e-01,  5.0320e-01],
           [ 1.0380e-01,  4.5340e-01],
           [ 1.0506e-01,  4.0361e-01]],

          [[ 7.8972e-02,  5.5447e-01],
           [ 8.0273e-02,  5.0302e-01],
           [ 8.1574e-02,  4.5159e-01],
           [ 8.2874e-02,  4.0017e-01]],

          ...,

          [[-5.7603e+05, -2.2280e+06],
           [-5.6826e+05, -2.5324e+06],
           [-5.6049e+05, -2.8368e+06],
           [-5.5272e+05, -3.1412e+06]],

          [[-7.2791e+05, -2.3267e+06],
           [-7.2014e+05, -2.6311e+06],
           [-7.1237e+05, -2.9355e+06],
           [-7.0460e+05, -3.2399e+06]],

          [[-8.7979e+05, -2.4254e+06],
           [-8.7202e+05, -2.7298e+06],
           [-8.6425e+05, -3.0342e+06],
           [-8.5648e+05, -3.3386e+06]]]],



        [[[[ 3.7130e+06, -1.1577e+06],
           [ 3.7043e+06, -1.4616e+06],
           [ 3.6956e+06, -1.7655e+06],
           [ 3.6870e+06, -2.0694e+06]],

          [[ 3.7495e+06, -1.0628e+06],
           [ 3.7408e+06, -1.3667e+06],
           [ 3.7321e+06, -1.6706e+06],
           [ 3.7235e+06, -1.9745e+06]],

          [[ 3.7860e+06, -9.6792e+05],
           [ 3.7773e+06, -1.2718e+06],
           [ 3.7686e+06, -1.5757e+06],
           [ 3.7600e+06, -1.8797e+06]],

          ...,

          [[-1.6497e+00,  8.7903e-01],
           [-1.6541e+00,  7.4690e-01],
           [-1.6585e+00,  6.1467e-01],
           [-1.6630e+00,  4.8235e-01]],

          [[-1.5094e+00,  8.5026e-01],
           [-1.5134e+00,  7.2819e-01],
           [-1.5174e+00,  6.0603e-01],
           [-1.5215e+00,  4.8379e-01]],

          [[-1.3889e+00,  8.2556e-01],
           [-1.3926e+00,  7.1213e-01],
           [-1.3963e+00,  5.9862e-01],
           [-1.4000e+00,  4.8504e-01]]]]]) torch.Size([6, 1, 2500, 4, 2]) tensor([[[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [ True,  True,  True,  True],
          [ True,  True,  True,  True],
          [ True,  True,  True,  True]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [ True,  True,  True,  True],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[ True,  True,  True,  True],
          [ True,  True,  True,  True],
          [ True,  True,  True,  True],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]]]) torch.Size([6, 1, 2500, 4]) tensor([0]) torch.Size([1]) encoder
@@ tensor([[[-0.4633, -0.4840, -0.6914,  ...,  1.7970, -0.6880,  1.1148],
         [-0.8740,  0.1078,  0.1015,  ...,  1.0734, -1.0126,  0.5774],
         [-0.2688,  0.0942, -0.0786,  ...,  1.5920, -0.3987,  0.9873],
         ...,
         [-1.4008,  0.2246, -0.8500,  ...,  1.3639, -1.6707,  0.9421],
         [-1.1878,  0.0280, -1.1168,  ...,  1.3777, -2.1463,  1.3059],
         [-1.3567,  0.2751, -0.8978,  ...,  1.2305, -2.0882,  1.3165]]]) torch.Size([1, 2500, 256]) tensor([[[[ 5.9792e-01, -4.8126e-01, -3.2352e-01,  ...,  6.2834e-01,
            6.8969e-01,  1.1347e+00]],

         [[-2.4157e-01,  1.9641e-01, -5.7206e-01,  ...,  8.0119e-01,
            5.0721e-01,  1.1817e+00]],

         [[-3.5227e-02, -4.3385e-01, -6.5339e-02,  ...,  7.4394e-01,
            3.1284e-01,  1.3502e+00]],

         ...,

         [[-2.9474e-01,  5.9223e-01, -1.3956e+00,  ..., -2.3192e-01,
            6.9876e-01,  7.7381e-01]],

         [[-1.8471e-02,  4.7979e-01, -1.4278e+00,  ...,  5.1946e-01,
            8.3468e-01,  4.3934e-01]],

         [[ 2.9920e-01, -4.3340e-01, -5.9113e-01,  ...,  1.0453e+00,
            8.2316e-01,  5.3841e-01]]],


        [[[-5.0628e-01, -1.6901e-01, -2.9417e-01,  ...,  1.4568e+00,
            1.5463e+00,  3.2410e+00]],

         [[ 1.9946e-01,  5.5797e-01, -4.6248e-01,  ...,  2.0408e-01,
            7.7422e-01,  2.8938e+00]],

         [[-2.3970e-01,  9.4032e-02, -3.2769e-01,  ...,  1.4844e+00,
            1.3290e+00,  3.0470e+00]],

         ...,

         [[ 9.7726e-01,  1.0396e+00, -1.5998e-04,  ...,  2.5447e+00,
            1.8597e+00,  2.9086e+00]],

         [[ 1.2143e+00,  3.5815e+00, -4.2121e-01,  ...,  2.4103e+00,
            1.4564e+00,  3.9619e+00]],

         [[ 1.1321e+00,  2.5492e+00,  1.9070e-01,  ...,  1.7542e+00,
            2.0327e-01,  3.0339e+00]]],


        [[[-3.4350e-01,  3.6802e-01,  2.3324e-01,  ..., -1.1752e-01,
           -1.4116e+00,  1.1068e+00]],

         [[-5.1576e-01,  4.7677e-01, -3.3855e-03,  ..., -4.0339e-01,
           -1.1366e+00,  1.0260e+00]],

         [[-3.4744e-01,  1.0805e-01,  4.0055e-01,  ..., -2.5230e-01,
           -1.0664e+00,  9.4769e-01]],

         ...,

         [[-1.1653e+00,  5.4161e-01, -7.0555e-01,  ..., -1.0570e+00,
           -1.0388e+00,  1.3206e+00]],

         [[-1.1619e+00,  7.2963e-01, -9.3389e-01,  ..., -9.4912e-01,
           -9.5996e-01,  1.3135e+00]],

         [[-6.1750e-01,  2.1981e-02, -1.1703e-01,  ..., -3.1704e-01,
           -1.4295e+00,  1.2898e+00]]],


        [[[-3.7267e-01, -1.6975e+00, -3.9942e-01,  ...,  1.3464e+00,
           -1.2175e+00,  4.7708e-01]],

         [[-2.0136e-01, -1.4968e+00, -6.9495e-01,  ...,  6.3891e-01,
           -9.4623e-01,  1.7334e-01]],

         [[-3.0778e-01, -1.8394e+00, -4.4608e-01,  ...,  8.4153e-01,
           -1.0304e+00,  2.1146e-01]],

         ...,

         [[-1.1454e+00, -2.0540e-01, -1.6219e+00,  ..., -1.2814e-01,
           -1.2195e+00,  1.6333e+00]],

         [[-9.8370e-01, -2.4320e-01, -2.1621e+00,  ...,  2.4822e-01,
           -1.0177e+00,  2.1811e+00]],

         [[-4.5920e-01, -1.1781e+00, -1.1664e+00,  ...,  1.0799e+00,
           -1.3336e+00,  1.4252e+00]]],


        [[[ 1.5720e+00, -2.9789e-01,  9.1371e-01,  ..., -2.8282e-01,
           -1.7120e-01,  2.3297e+00]],

         [[ 1.2224e+00, -9.3539e-01,  1.1799e-01,  ..., -5.8252e-01,
            3.3514e-01,  1.9569e+00]],

         [[ 5.3769e-01, -1.5938e+00, -5.5409e-01,  ..., -1.0307e+00,
            2.2999e-01,  1.8672e+00]],

         ...,

         [[ 1.2376e+00, -8.2182e-01,  4.0195e-01,  ..., -2.1291e-02,
           -2.7246e-01,  1.4273e+00]],

         [[ 7.8491e-01, -8.8231e-01,  2.5364e-01,  ...,  3.1898e-01,
           -2.4907e-01,  7.9413e-01]],

         [[ 8.9071e-01, -1.2539e+00,  6.3538e-01,  ...,  6.3550e-01,
           -2.8259e-01,  1.1945e+00]]],


        [[[ 4.1723e-01, -6.7326e-01, -5.3956e-02,  ...,  1.9507e+00,
            1.0088e+00,  2.4715e+00]],

         [[ 8.8778e-01,  5.2749e-01,  3.2656e-01,  ...,  2.1128e+00,
            6.7408e-01,  1.6133e+00]],

         [[ 7.1528e-01,  2.7949e-01,  1.3660e+00,  ...,  1.6165e+00,
            5.2043e-01,  1.7236e+00]],

         ...,

         [[ 4.8156e-01,  3.5478e-01,  4.0128e-02,  ...,  3.1051e-01,
            9.4616e-01,  1.9903e+00]],

         [[-7.1233e-02,  1.5719e-01,  1.1237e-01,  ...,  1.0358e-01,
            9.2093e-01,  1.2332e+00]],

         [[ 1.5667e-01, -6.6589e-01,  7.2804e-01,  ...,  7.3006e-01,
           -2.6699e-01,  1.3334e+00]]]]) torch.Size([6, 375, 1, 256]) tensor([[[[ 5.9792e-01, -4.8126e-01, -3.2352e-01,  ...,  6.2834e-01,
            6.8969e-01,  1.1347e+00]],

         [[-2.4157e-01,  1.9641e-01, -5.7206e-01,  ...,  8.0119e-01,
            5.0721e-01,  1.1817e+00]],

         [[-3.5227e-02, -4.3385e-01, -6.5339e-02,  ...,  7.4394e-01,
            3.1284e-01,  1.3502e+00]],

         ...,

         [[-2.9474e-01,  5.9223e-01, -1.3956e+00,  ..., -2.3192e-01,
            6.9876e-01,  7.7381e-01]],

         [[-1.8471e-02,  4.7979e-01, -1.4278e+00,  ...,  5.1946e-01,
            8.3468e-01,  4.3934e-01]],

         [[ 2.9920e-01, -4.3340e-01, -5.9113e-01,  ...,  1.0453e+00,
            8.2316e-01,  5.3841e-01]]],


        [[[-5.0628e-01, -1.6901e-01, -2.9417e-01,  ...,  1.4568e+00,
            1.5463e+00,  3.2410e+00]],

         [[ 1.9946e-01,  5.5797e-01, -4.6248e-01,  ...,  2.0408e-01,
            7.7422e-01,  2.8938e+00]],

         [[-2.3970e-01,  9.4032e-02, -3.2769e-01,  ...,  1.4844e+00,
            1.3290e+00,  3.0470e+00]],

         ...,

         [[ 9.7726e-01,  1.0396e+00, -1.5998e-04,  ...,  2.5447e+00,
            1.8597e+00,  2.9086e+00]],

         [[ 1.2143e+00,  3.5815e+00, -4.2121e-01,  ...,  2.4103e+00,
            1.4564e+00,  3.9619e+00]],

         [[ 1.1321e+00,  2.5492e+00,  1.9070e-01,  ...,  1.7542e+00,
            2.0327e-01,  3.0339e+00]]],


        [[[-3.4350e-01,  3.6802e-01,  2.3324e-01,  ..., -1.1752e-01,
           -1.4116e+00,  1.1068e+00]],

         [[-5.1576e-01,  4.7677e-01, -3.3855e-03,  ..., -4.0339e-01,
           -1.1366e+00,  1.0260e+00]],

         [[-3.4744e-01,  1.0805e-01,  4.0055e-01,  ..., -2.5230e-01,
           -1.0664e+00,  9.4769e-01]],

         ...,

         [[-1.1653e+00,  5.4161e-01, -7.0555e-01,  ..., -1.0570e+00,
           -1.0388e+00,  1.3206e+00]],

         [[-1.1619e+00,  7.2963e-01, -9.3389e-01,  ..., -9.4912e-01,
           -9.5996e-01,  1.3135e+00]],

         [[-6.1750e-01,  2.1981e-02, -1.1703e-01,  ..., -3.1704e-01,
           -1.4295e+00,  1.2898e+00]]],


        [[[-3.7267e-01, -1.6975e+00, -3.9942e-01,  ...,  1.3464e+00,
           -1.2175e+00,  4.7708e-01]],

         [[-2.0136e-01, -1.4968e+00, -6.9495e-01,  ...,  6.3891e-01,
           -9.4623e-01,  1.7334e-01]],

         [[-3.0778e-01, -1.8394e+00, -4.4608e-01,  ...,  8.4153e-01,
           -1.0304e+00,  2.1146e-01]],

         ...,

         [[-1.1454e+00, -2.0540e-01, -1.6219e+00,  ..., -1.2814e-01,
           -1.2195e+00,  1.6333e+00]],

         [[-9.8370e-01, -2.4320e-01, -2.1621e+00,  ...,  2.4822e-01,
           -1.0177e+00,  2.1811e+00]],

         [[-4.5920e-01, -1.1781e+00, -1.1664e+00,  ...,  1.0799e+00,
           -1.3336e+00,  1.4252e+00]]],


        [[[ 1.5720e+00, -2.9789e-01,  9.1371e-01,  ..., -2.8282e-01,
           -1.7120e-01,  2.3297e+00]],

         [[ 1.2224e+00, -9.3539e-01,  1.1799e-01,  ..., -5.8252e-01,
            3.3514e-01,  1.9569e+00]],

         [[ 5.3769e-01, -1.5938e+00, -5.5409e-01,  ..., -1.0307e+00,
            2.2999e-01,  1.8672e+00]],

         ...,

         [[ 1.2376e+00, -8.2182e-01,  4.0195e-01,  ..., -2.1291e-02,
           -2.7246e-01,  1.4273e+00]],

         [[ 7.8491e-01, -8.8231e-01,  2.5364e-01,  ...,  3.1898e-01,
           -2.4907e-01,  7.9413e-01]],

         [[ 8.9071e-01, -1.2539e+00,  6.3538e-01,  ...,  6.3550e-01,
           -2.8259e-01,  1.1945e+00]]],


        [[[ 4.1723e-01, -6.7326e-01, -5.3956e-02,  ...,  1.9507e+00,
            1.0088e+00,  2.4715e+00]],

         [[ 8.8778e-01,  5.2749e-01,  3.2656e-01,  ...,  2.1128e+00,
            6.7408e-01,  1.6133e+00]],

         [[ 7.1528e-01,  2.7949e-01,  1.3660e+00,  ...,  1.6165e+00,
            5.2043e-01,  1.7236e+00]],

         ...,

         [[ 4.8156e-01,  3.5478e-01,  4.0128e-02,  ...,  3.1051e-01,
            9.4616e-01,  1.9903e+00]],

         [[-7.1233e-02,  1.5719e-01,  1.1237e-01,  ...,  1.0358e-01,
            9.2093e-01,  1.2332e+00]],

         [[ 1.5667e-01, -6.6589e-01,  7.2804e-01,  ...,  7.3006e-01,
           -2.6699e-01,  1.3334e+00]]]]) torch.Size([6, 375, 1, 256]) None None None tensor([[[[0.0100, 0.0100, 0.0625],
          [0.0300, 0.0100, 0.0625],
          [0.0500, 0.0100, 0.0625],
          ...,
          [0.9500, 0.9900, 0.0625],
          [0.9700, 0.9900, 0.0625],
          [0.9900, 0.9900, 0.0625]],

         [[0.0100, 0.0100, 0.3542],
          [0.0300, 0.0100, 0.3542],
          [0.0500, 0.0100, 0.3542],
          ...,
          [0.9500, 0.9900, 0.3542],
          [0.9700, 0.9900, 0.3542],
          [0.9900, 0.9900, 0.3542]],

         [[0.0100, 0.0100, 0.6458],
          [0.0300, 0.0100, 0.6458],
          [0.0500, 0.0100, 0.6458],
          ...,
          [0.9500, 0.9900, 0.6458],
          [0.9700, 0.9900, 0.6458],
          [0.9900, 0.9900, 0.6458]],

         [[0.0100, 0.0100, 0.9375],
          [0.0300, 0.0100, 0.9375],
          [0.0500, 0.0100, 0.9375],
          ...,
          [0.9500, 0.9900, 0.9375],
          [0.9700, 0.9900, 0.9375],
          [0.9900, 0.9900, 0.9375]]]]) torch.Size([1, 4, 2500, 3]) tensor([[15, 25]]) torch.Size([1, 2]) tensor([[[[[-6.5657e+06, -2.2032e+06],
           [-6.5609e+06, -2.5011e+06],
           [-6.5561e+06, -2.7990e+06],
           [-6.5513e+06, -3.0968e+06]],

          [[-6.4066e+06, -2.2071e+06],
           [-6.4018e+06, -2.5050e+06],
           [-6.3970e+06, -2.8029e+06],
           [-6.3922e+06, -3.1007e+06]],

          [[-6.2474e+06, -2.2110e+06],
           [-6.2427e+06, -2.5089e+06],
           [-6.2379e+06, -2.8067e+06],
           [-6.2331e+06, -3.1046e+06]],

          ...,

          [[ 1.2650e+00,  6.5975e-01],
           [ 1.2627e+00,  5.9728e-01],
           [ 1.2604e+00,  5.3514e-01],
           [ 1.2582e+00,  4.7331e-01]],

          [[ 1.2982e+00,  6.5928e-01],
           [ 1.2958e+00,  5.9678e-01],
           [ 1.2934e+00,  5.3461e-01],
           [ 1.2911e+00,  4.7275e-01]],

          [[ 1.3314e+00,  6.5880e-01],
           [ 1.3289e+00,  5.9628e-01],
           [ 1.3265e+00,  5.3408e-01],
           [ 1.3241e+00,  4.7219e-01]]]],



        [[[[-2.3560e+06, -3.1485e+06],
           [-2.3618e+06, -3.4498e+06],
           [-2.3677e+06, -3.7511e+06],
           [-2.3736e+06, -4.0525e+06]],

          [[-2.1813e+06, -3.0675e+06],
           [-2.1871e+06, -3.3688e+06],
           [-2.1930e+06, -3.6702e+06],
           [-2.1989e+06, -3.9715e+06]],

          [[-2.0065e+06, -2.9865e+06],
           [-2.0124e+06, -3.2879e+06],
           [-2.0183e+06, -3.5892e+06],
           [-2.0242e+06, -3.8906e+06]],

          ...,

          [[ 3.0322e-01,  6.1591e-01],
           [ 3.0197e-01,  5.6890e-01],
           [ 3.0072e-01,  5.2201e-01],
           [ 2.9947e-01,  4.7522e-01]],

          [[ 3.2155e-01,  6.1210e-01],
           [ 3.2031e-01,  5.6631e-01],
           [ 3.1907e-01,  5.2063e-01],
           [ 3.1784e-01,  4.7505e-01]],

          [[ 3.3896e-01,  6.0848e-01],
           [ 3.3773e-01,  5.6385e-01],
           [ 3.3650e-01,  5.1932e-01],
           [ 3.3528e-01,  4.7489e-01]]]],



        [[[[-3.9792e+00,  7.1230e-01],
           [-3.9388e+00,  4.6221e-01],
           [-3.8992e+00,  2.1599e-01],
           [-3.8601e+00, -2.6433e-02]],

          [[-4.6132e+00,  7.4754e-01],
           [-4.5608e+00,  4.5739e-01],
           [-4.5092e+00,  1.7245e-01],
           [-4.4586e+00, -1.0742e-01]],

          [[-5.4895e+00,  7.9624e-01],
           [-5.4176e+00,  4.5076e-01],
           [-5.3473e+00,  1.1264e-01],
           [-5.2785e+00, -2.1835e-01]],

          ...,

          [[ 4.7664e+06,  3.1539e+05],
           [ 4.7777e+06,  1.4617e+04],
           [ 4.7890e+06, -2.8615e+05],
           [ 4.8003e+06, -5.8692e+05]],

          [[ 4.7705e+06,  2.3233e+05],
           [ 4.7818e+06, -6.8438e+04],
           [ 4.7932e+06, -3.6921e+05],
           [ 4.8045e+06, -6.6998e+05]],

          [[ 4.7747e+06,  1.4928e+05],
           [ 4.7860e+06, -1.5149e+05],
           [ 4.7973e+06, -4.5226e+05],
           [ 4.8086e+06, -7.5303e+05]]]],



        [[[[ 1.0344e+00,  5.4152e-01],
           [ 1.0355e+00,  5.0260e-01],
           [ 1.0366e+00,  4.6354e-01],
           [ 1.0377e+00,  4.2433e-01]],

          [[ 1.0140e+00,  5.4124e-01],
           [ 1.0151e+00,  5.0231e-01],
           [ 1.0162e+00,  4.6323e-01],
           [ 1.0173e+00,  4.2401e-01]],

          [[ 9.9364e-01,  5.4096e-01],
           [ 9.9469e-01,  5.0202e-01],
           [ 9.9575e-01,  4.6293e-01],
           [ 9.9681e-01,  4.2369e-01]],

          ...,

          [[-5.0303e+06, -2.0712e+06],
           [-5.0342e+06, -2.2692e+06],
           [-5.0380e+06, -2.4673e+06],
           [-5.0419e+06, -2.6653e+06]],

          [[-5.1332e+06, -2.0735e+06],
           [-5.1371e+06, -2.2715e+06],
           [-5.1409e+06, -2.4696e+06],
           [-5.1448e+06, -2.6677e+06]],

          [[-5.2361e+06, -2.0758e+06],
           [-5.2400e+06, -2.2738e+06],
           [-5.2439e+06, -2.4719e+06],
           [-5.2477e+06, -2.6700e+06]]]],



        [[[[ 1.2223e-01,  5.5164e-01],
           [ 1.2345e-01,  5.0336e-01],
           [ 1.2467e-01,  4.5509e-01],
           [ 1.2588e-01,  4.0684e-01]],

          [[ 1.0129e-01,  5.5301e-01],
           [ 1.0255e-01,  5.0320e-01],
           [ 1.0380e-01,  4.5340e-01],
           [ 1.0506e-01,  4.0361e-01]],

          [[ 7.8972e-02,  5.5447e-01],
           [ 8.0273e-02,  5.0302e-01],
           [ 8.1574e-02,  4.5159e-01],
           [ 8.2874e-02,  4.0017e-01]],

          ...,

          [[-5.7603e+05, -2.2280e+06],
           [-5.6826e+05, -2.5324e+06],
           [-5.6049e+05, -2.8368e+06],
           [-5.5272e+05, -3.1412e+06]],

          [[-7.2791e+05, -2.3267e+06],
           [-7.2014e+05, -2.6311e+06],
           [-7.1237e+05, -2.9355e+06],
           [-7.0460e+05, -3.2399e+06]],

          [[-8.7979e+05, -2.4254e+06],
           [-8.7202e+05, -2.7298e+06],
           [-8.6425e+05, -3.0342e+06],
           [-8.5648e+05, -3.3386e+06]]]],



        [[[[ 3.7130e+06, -1.1577e+06],
           [ 3.7043e+06, -1.4616e+06],
           [ 3.6956e+06, -1.7655e+06],
           [ 3.6870e+06, -2.0694e+06]],

          [[ 3.7495e+06, -1.0628e+06],
           [ 3.7408e+06, -1.3667e+06],
           [ 3.7321e+06, -1.6706e+06],
           [ 3.7235e+06, -1.9745e+06]],

          [[ 3.7860e+06, -9.6792e+05],
           [ 3.7773e+06, -1.2718e+06],
           [ 3.7686e+06, -1.5757e+06],
           [ 3.7600e+06, -1.8797e+06]],

          ...,

          [[-1.6497e+00,  8.7903e-01],
           [-1.6541e+00,  7.4690e-01],
           [-1.6585e+00,  6.1467e-01],
           [-1.6630e+00,  4.8235e-01]],

          [[-1.5094e+00,  8.5026e-01],
           [-1.5134e+00,  7.2819e-01],
           [-1.5174e+00,  6.0603e-01],
           [-1.5215e+00,  4.8379e-01]],

          [[-1.3889e+00,  8.2556e-01],
           [-1.3926e+00,  7.1213e-01],
           [-1.3963e+00,  5.9862e-01],
           [-1.4000e+00,  4.8504e-01]]]]]) torch.Size([6, 1, 2500, 4, 2]) tensor([[[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [ True,  True,  True,  True],
          [ True,  True,  True,  True],
          [ True,  True,  True,  True]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [ True,  True,  True,  True],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[ True,  True,  True,  True],
          [ True,  True,  True,  True],
          [ True,  True,  True,  True],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]],


        [[[False, False, False, False],
          [False, False, False, False],
          [False, False, False, False],
          ...,
          [False, False, False, False],
          [False, False, False, False],
          [False, False, False, False]]]]) torch.Size([6, 1, 2500, 4]) tensor([0]) torch.Size([1]) encoder
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:314: TracerWarning: torch.tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  spatial_shapes=torch.tensor([[bev_h, bev_w]], device=query.device),
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/transformer.py:315: TracerWarning: torch.tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  level_start_index=torch.tensor([0], device=query.device),
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/decoder.py:293: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (spatial_shapes[:, 0] * spatial_shapes[:, 1]).sum() == num_value
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/decoder.py:310: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if reference_points.shape[-1] == 2:
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/modules/decoder.py:108: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert reference_points.shape[-1] == 3
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/bevformer/dense_heads/bevformer_head.py:185: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert reference.shape[-1] == 3
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/core/bbox/coders/nms_free_coder.py:57: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  bbox_index = indexs // self.num_classes
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/core/bbox/util.py:48: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if normalized_bboxes.size(-1) > 8:
/media/ava/DATA2/Raj/BEVFormer/src/projects/mmdet3d_plugin/core/bbox/coders/nms_free_coder.py:76: TracerWarning: torch.tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  self.post_center_range = torch.tensor(
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
WARNING: The shape inference of prim::Constant type is missing, so it may result in wrong shape inference for the exported graph. Please consider adding it in symbolic function.
